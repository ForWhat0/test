[{"/home/roman/projects/test/src/service-worker.js":"1","/home/roman/projects/test/src/index.js":"2","/home/roman/projects/test/src/App.js":"3","/home/roman/projects/test/src/serviceWorkerRegistration.js":"4"},{"size":2837,"mtime":1681169352490,"results":"5","hashOfConfig":"6"},{"size":571,"mtime":1681169352490,"results":"7","hashOfConfig":"6"},{"size":5499,"mtime":1681169352490,"results":"8","hashOfConfig":"6"},{"size":5064,"mtime":1681169352490,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"xcg8ie",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/roman/projects/test/src/service-worker.js",[],["24","25","26","27"],[],"/home/roman/projects/test/src/index.js",[],[],"/home/roman/projects/test/src/App.js",["28"],[],"import React, {useCallback, useEffect, useState} from 'react';\nimport styled from \"styled-components\";\n\nconst GAME_HEIGHT = document.body.scrollHeight;\nconst GAME_WIDTH = document.body.scrollWidth;\n\nconst BIRD_INITIAL_POSITION = 20 * GAME_HEIGHT / 100;\nconst BIRD_HEIGHT = 4 * GAME_WIDTH / 100;\nconst BIRD_WIDTH = 4 * GAME_WIDTH / 100;\nconst BIRD_JUMP = 12 * GAME_WIDTH / 100;\n\nconst TUBE_WIDTH = 16 * GAME_WIDTH / 100;\nconst TUBE_GAP =  24 * GAME_WIDTH / 100;\nconst INITIAL_TOP_TUBE_HEIGHT = 60 * GAME_HEIGHT / 100;\n\nconst START = 'START';\nconst EASY = 'EASY';\nconst MEDIUM = 'MEDIUM';\nconst HARD = 'HARD';\nconst ULTRA_HARD = 'ULTRA_HARD';\n\nconst DIFF_SETTINGS = {\n    START: {\n        min: 0,\n        max: 1,\n        game_gravity: 4,\n        tube_speed: 4,\n        type: START\n    },\n    EASY: {\n        min: 2,\n        max: 5,\n        game_gravity: 5,\n        tube_speed: 5,\n        type: EASY\n    },\n    MEDIUM: {\n        min: 6,\n        max: 10,\n        game_gravity: 6,\n        tube_speed: 6,\n        type: MEDIUM\n    },\n    HARD: {\n        min: 11,\n        max: 20,\n        game_gravity: 7,\n        tube_speed: 7,\n        type: HARD\n    },\n    ULTRA_HARD: {\n        min: 21,\n        max: 22,\n        game_gravity: 8,\n        tube_speed: 8,\n        type: ULTRA_HARD\n    },\n};\n\nfunction between(x, min, max) {\n    return x >= min && x <= max;\n}\n\nfunction App() {\n    const [diff, setDiff] = useState(DIFF_SETTINGS.START.type);\n    const [gameIsStarted, setGameIsStarted] = useState(false);\n    const [birdPosition, setBirdPosition] = useState(BIRD_INITIAL_POSITION);\n    const [tubePosition, setTubePosition] = useState(GAME_WIDTH - TUBE_WIDTH);\n    const [topTubeHeight, setTopTubeHeight] = useState(INITIAL_TOP_TUBE_HEIGHT);\n    const [score, setScore] = useState(0);\n\n    const bottomTubeHeight = GAME_HEIGHT - TUBE_GAP - topTubeHeight;\n\n    useEffect(() => {\n        if (!gameIsStarted) return;\n        let intervalId;\n        if (birdPosition < (GAME_HEIGHT - BIRD_HEIGHT)) {\n            intervalId = setInterval(() => {\n                setBirdPosition((oldPosition) => oldPosition + DIFF_SETTINGS[diff].game_gravity);\n            }, 24);\n        }\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, [birdPosition, gameIsStarted, diff]);\n\n    useEffect(() => {\n        if (!gameIsStarted) return;\n        let intervalId;\n        if (tubePosition >= -TUBE_WIDTH) {\n            intervalId = setInterval(() => {\n                setTubePosition((oldPosition) => oldPosition - DIFF_SETTINGS[diff].tube_speed);\n            }, 24);\n\n            return () => {\n                clearInterval(intervalId);\n            };\n        } else {\n            setTopTubeHeight(Math.floor(Math.random() * (GAME_HEIGHT - TUBE_GAP)));\n            setTubePosition(GAME_WIDTH + TUBE_WIDTH);\n            setScore((oldScore) => ++oldScore)\n        }\n    }, [tubePosition, gameIsStarted, diff]);\n\n    useEffect(() => {\n        if (gameIsStarted && BIRD_WIDTH >= tubePosition) {\n            const hitTop = between(birdPosition, 0, topTubeHeight);\n            const hitBottom = between(birdPosition, topTubeHeight + TUBE_GAP - BIRD_HEIGHT, GAME_HEIGHT);\n\n            if (hitTop || hitBottom) setGameIsStarted(false);\n        }\n    }, [tubePosition, gameIsStarted, birdPosition]);\n\n    useEffect(() => {\n        if (!gameIsStarted) return;\n\n        for (const key in DIFF_SETTINGS) {\n            if (between(score,DIFF_SETTINGS[key].min, DIFF_SETTINGS[key].max))  {\n                setDiff(DIFF_SETTINGS[key].type);\n                break;\n            }\n        }\n    }, [gameIsStarted, score])\n\n    const handleClick = useCallback(() => {\n        if (!gameIsStarted) {\n            setGameIsStarted(true);\n            setDiff(DIFF_SETTINGS.EASY.type);\n            setBirdPosition(BIRD_INITIAL_POSITION);\n            setTubePosition(GAME_WIDTH + TUBE_WIDTH);\n            setScore(0);\n        } else {\n            const newPosition = birdPosition - BIRD_JUMP;\n            if (newPosition > 0) {\n                setBirdPosition(birdPosition - BIRD_JUMP)\n            } else {\n                setBirdPosition(0);\n            }\n        }\n    }, [gameIsStarted, birdPosition])\n\n    return (\n        <Game onClick={handleClick}>\n            <Score\n                score={score}\n            />\n            <Bird\n                top={birdPosition}\n            />\n            <Tube\n                width={TUBE_WIDTH}\n                top={0}\n                left={tubePosition}\n                height={topTubeHeight}\n            />\n            <Tube\n                width={TUBE_WIDTH}\n                top={GAME_HEIGHT - bottomTubeHeight}\n                left={tubePosition}\n                height={bottomTubeHeight}\n            />\n        </Game>\n    );\n}\n\nexport default App;\n\n\nconst Game = styled.div`\n  position: relative;\n  background: yellow;\n  width: ${GAME_WIDTH}px;\n  height: ${GAME_HEIGHT}px;\n  display: flex;\n  margin: 0 auto;\n  overflow: hidden;\n  cursor: pointer;\n`\n\nconst Bird = styled.div`\n  position: absolute;\n  left: 0;\n  top: ${props => props.top}px;\n  height: ${BIRD_HEIGHT}px;\n  width: ${BIRD_WIDTH}px;\n  background: blue;\n`\n\nconst Tube = styled.div`\n  position: absolute;\n  height: ${props => props.height}px;\n  width: ${TUBE_WIDTH}px;\n  left: ${props => props.left}px;\n  top: ${props => props.top}px;\n  background: green;\n`\n\nconst Score = styled.div`\n  font-size: 24px;\n  color: red;\n  margin: 20px auto;\n  z-index: 100;\n\n  &:after {\n    content: '${props => props.score}';\n  }\n`;\n","/home/roman/projects/test/src/serviceWorkerRegistration.js",[],[],{"ruleId":"29","severity":2,"message":"30","line":22,"column":18,"nodeType":"31","messageId":"32","endLine":22,"endColumn":22,"suppressions":"33"},{"ruleId":"29","severity":2,"message":"30","line":53,"column":31,"nodeType":"31","messageId":"32","endLine":53,"endColumn":35,"suppressions":"34"},{"ruleId":"29","severity":2,"message":"30","line":66,"column":1,"nodeType":"31","messageId":"32","endLine":66,"endColumn":5,"suppressions":"35"},{"ruleId":"29","severity":2,"message":"30","line":68,"column":5,"nodeType":"31","messageId":"32","endLine":68,"endColumn":9,"suppressions":"36"},{"ruleId":"37","severity":1,"message":"38","line":113,"column":8,"nodeType":"39","endLine":113,"endColumn":51,"suggestions":"40"},"no-restricted-globals","Unexpected use of 'self'.","Identifier","defaultMessage",["41"],["42"],["43"],["44"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'topTubeHeight'. Either include it or remove the dependency array.","ArrayExpression",["45"],{"kind":"46","justification":"47"},{"kind":"46","justification":"47"},{"kind":"46","justification":"47"},{"kind":"46","justification":"47"},{"desc":"48","fix":"49"},"directive","","Update the dependencies array to be: [tubePosition, gameIsStarted, birdPosition, topTubeHeight]",{"range":"50","text":"51"},[3244,3287],"[tubePosition, gameIsStarted, birdPosition, topTubeHeight]"]